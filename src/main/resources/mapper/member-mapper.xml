<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD mapper 3.0//EN" "Http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<!-- ResultMap -->
	<resultMap type="java.util.Map" id="loginResult">
		<result column="user_id" property="userId"/>
		<result column="user_pw" property="userPw"/>
		<result column="user_nick" property="userNick"/>
		<result column="user_permission" property="userPermission"/>
	</resultMap>
	
	<resultMap type="java.util.Map" id="registResult">
		<result column="user_id" property="userId"/>
		<result column="user_nick" property="userNick"/>
		<result column="user_name" property="userName"/>
	</resultMap>
	
	<!-- 로그인 (login) -->
	<!-- select -->
	<select id="checkLoginInfo" parameterType="String" resultMap="loginResult">
		select user_id,user_pw,user_nick,user_permission from member where user_id=#{user_id}
	</select>	
	
	<!-- 회원가입(registration) -->
	<!-- select -->
	<select id="checkRegistInfo" parameterType="String" resultMap="registResult">
		select user_id, user_nick, user_name from member where user_id=#{userId}
	</select>
	
	<select id="checkRegistId" parameterType="String" resultType="int">
    	select nvl(count(*),0) from member where user_id=#{userId}
	</select>
	
	<select id="checkRegistNick" parameterType="String" resultType="int">
    	select nvl(count(*),0) from member where user_nick=#{userNick}
	</select>
	
	<select id="checkRegistEmail" parameterType="String" resultType="int">
    	select nvl(count(*),0) from member where user_Email=#{userEmail}
	</select>
	
	<!-- insert -->
	<insert id="insertRegistInfo" parameterType="MemberDTO">
		insert into member values(#{userId},#{userPw},#{userName},#{userNick},#{userPhone},#{userEmail},#{userPostcode},#{userAddress1},#{userAddress2},#{userGender},#{userBirthday},sysdate,${userPermission},' ')
	</insert>
	
	<!-- 아이디 찾기 -->	
	<!-- select -->
	<select id="findId" parameterType="String" resultType="String">
		select user_id from member where user_email=#{userEmail}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="checkIdFindPw" parameterType="String" resultType="int">
		select count(*) from member where user_id=#{userId}
	</select>
	
	<update id="changePw" parameterType="java.util.Map">
		UPDATE member
		SET user_pw = #{userPw}
		WHERE user_id=#{userId}
	</update>
	
	<!-- 회원정보 수정 -->
	<select id="checkPw" parameterType="String" resultType="String">
		select user_pw from member where user_id=#{userId}
	</select>
	
	<select id="getUserInfo" parameterType="String" resultType="MemberDTO">
		select user_id as userId, user_pw as userPw, user_name as userName, user_nick as userNick, user_phone as userPhone, user_email as userEmail, user_postcode as userPostcode, user_address1 as userAddress1, user_address2 as userAddress2, user_gender as userGender, user_birthday as userBirthday, user_permission as userPermission, user_indate as userIndate from member where user_id=#{userId}
	</select>
	
	<update id="setModifyUserInfo" parameterType="MemberDTO">
		UPDATE member
		SET 
		user_pw = #{userPw},
        user_phone = #{userPhone},
        user_postcode = #{userPostcode},
        user_address1 = #{userAddress1},
        user_address2 = #{userAddress2},
        user_gender = #{userGender}
		WHERE user_id=#{userId}
	</update>
		
		
	<!-- 로그 인서트 -->
	<insert id="insertUserLog" parameterType="java.util.Map">
		insert into userlog
		values(#{userId},#{ip},#{loginCondition},sysdate)
	</insert>
	
	<update id="deleteUser" parameterType="String">
		UPDATE member
		SET 
		user_permission = 99,
		user_indate = sysdate
        WHERE user_id=#{userId}
	</update>
	
	<select id="myBoard" parameterType="java.util.Map" resultType="java.util.Map">
		select * from ${board} where user_id=#{userId} and available = 0
	</select>
	
	
	<select id="myComment" parameterType="java.util.Map" resultType="java.util.Map">
		select a.idx as idx, a.user_id, a.content, NVL(g.good, 0) as good, NVL(b.bad, 0) as bad , NVL(rp.report, 0) report, a.wdate as wdate, bb.title as title, mm.user_nick as user_nick, bb.idx as board_idx from 
		<if test="board != null and board.equals('story_comment')">
		story_comment 
		</if>
		<if test="board != null and board.equals('photo_comment')">
		photo_comment 
		</if>
		<if test="board != null and board.equals('media_comment')">
		media_comment 
		</if>
		a 
		left outer join 
		(select count(good) good, comment_idx
		<if test="board != null and board.equals('story_comment')">
		from story_comment_recommend r, story_comment b 
		</if>
		<if test="board != null and board.equals('photo_comment')">
		 from photo_comment_recommend r, photo_comment b 
		</if>
		<if test="board != null and board.equals('media_comment')">
		 from media_comment_recommend r, media_comment b 
		 </if>
		where r.comment_idx = b.idx and good= 1 and available=0 
		group by comment_idx order by good desc) g 
		on a.idx = g.comment_idx
		left outer join 
		(select count(bad) bad, comment_idx
		<if test="board != null and board.equals('story_comment')">
		from story_comment_recommend r, story_comment b  
		</if>
		<if test="board != null and board.equals('photo_comment')">
		 from photo_comment_recommend r, photo_comment b 
		</if>
		<if test="board != null and board.equals('media_comment')">
		 from media_comment_recommend r, media_comment b 
		</if>
		where r.comment_idx = b.idx and bad= 1 and available=0 
		group by comment_idx order by bad desc
		) b
		on a.idx = b.comment_idx
		left outer join
		(select count(r.content) report, comment_idx
		<if test="board != null and board.equals('story_comment')">
		from story_comment_report r, story_comment b  
		</if>
		<if test="board != null and board.equals('photo_comment')">
		 from story_comment_report r, photo_comment b 
		</if>
		<if test="board != null and board.equals('media_comment')">
		 from story_comment_report r, media_comment b 
		</if>
		
		where r.comment_idx = b.idx and available=0 
		group by comment_idx order by report desc)
		rp
		on a.idx=rp.comment_idx
		left outer join
		<if test="board != null and board.equals('story_comment')">
		 story_board bb
		</if>
		<if test="board != null and board.equals('photo_comment')">
		 photo_board bb
		</if>
		<if test="board != null and board.equals('media_comment')">
		 media_board bb
		</if>
		on a.board_idx=bb.idx
		left outer join
		member mm
		on a.user_id=mm.user_id
		where a.user_id = #{userId} and a.available = 0
	</select>
	
	<update id="deleteComment" parameterType="java.util.Map">
		update 
		<if test="board != null and board.equals('story_comment')">
			story_comment
		</if>
		<if test="board != null and board.equals('photo_comment')">
			photo_comment
		</if>
		<if test="board != null and board.equals('media_comment')">
			media_comment
		</if>
		set available=1 where idx=#{idx}
	</update>
	
	<select id="getSuspendCause" parameterType="String" resultType="String">
		SELECT user_suspend
		FROM member
		WHERE user_id = #{userId}
	</select>
	
	<select id="getUserEmail" parameterType="String" resultType="String"> 
		SELECT user_email
		FROM member
		WHERE user_id = #{userId}
	</select>
	
</mapper>




